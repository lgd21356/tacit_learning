"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class logger_lcmt(object):
    __slots__ = ["time", "joint_positions", "joint_torques", "joint_velocities", "contact_forces", "output_torques", "tacit_torques"]

    __typenames__ = ["float", "float", "float", "float", "float", "float", "float"]

    __dimensions__ = [None, [12], [12], [12], [4], [12], [12]]

    def __init__(self):
        self.time = 0.0
        self.joint_positions = [ 0.0 for dim0 in range(12) ]
        self.joint_torques = [ 0.0 for dim0 in range(12) ]
        self.joint_velocities = [ 0.0 for dim0 in range(12) ]
        self.contact_forces = [ 0.0 for dim0 in range(4) ]
        self.output_torques = [ 0.0 for dim0 in range(12) ]
        self.tacit_torques = [ 0.0 for dim0 in range(12) ]

    def encode(self):
        buf = BytesIO()
        buf.write(logger_lcmt._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">f", self.time))
        buf.write(struct.pack('>12f', *self.joint_positions[:12]))
        buf.write(struct.pack('>12f', *self.joint_torques[:12]))
        buf.write(struct.pack('>12f', *self.joint_velocities[:12]))
        buf.write(struct.pack('>4f', *self.contact_forces[:4]))
        buf.write(struct.pack('>12f', *self.output_torques[:12]))
        buf.write(struct.pack('>12f', *self.tacit_torques[:12]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != logger_lcmt._get_packed_fingerprint():
            raise ValueError("Decode error")
        return logger_lcmt._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = logger_lcmt()
        self.time = struct.unpack(">f", buf.read(4))[0]
        self.joint_positions = struct.unpack('>12f', buf.read(48))
        self.joint_torques = struct.unpack('>12f', buf.read(48))
        self.joint_velocities = struct.unpack('>12f', buf.read(48))
        self.contact_forces = struct.unpack('>4f', buf.read(16))
        self.output_torques = struct.unpack('>12f', buf.read(48))
        self.tacit_torques = struct.unpack('>12f', buf.read(48))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if logger_lcmt in parents: return 0
        tmphash = (0x97aa17f141debb66) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if logger_lcmt._packed_fingerprint is None:
            logger_lcmt._packed_fingerprint = struct.pack(">Q", logger_lcmt._get_hash_recursive([]))
        return logger_lcmt._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", logger_lcmt._get_packed_fingerprint())[0]

